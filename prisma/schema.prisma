generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  role              Role               @default(STUDENT)
  active            Boolean            @default(true)
  isOnline          Boolean            @default(false)
  lastSeen          DateTime           @default(now())
  createdAt         DateTime           @default(now())
  photo             String?
  language          String?
  country           String?
  bio               String?
  languageLevel     String?
  courseInterests   String[]
  tutorPreferences  Json?
  learningGoals     Json?
  preferences       Json?
  accounts          Account[]
  adminActivities   AdminActivity[]
  availability      Availability[]
  bookingsAsStudent Booking[]          @relation("StudentBookings")
  bookingsAsTutor   Booking[]          @relation("TutorBookings")
  connectedBanks    ConnectedBank[]
  messagesSent      Message[]          @relation("SentMessages")
  notifications     Notification[]
  payments          Payment[]
  payouts           Payout[]
  resourceDownloads ResourceDownload[]
  resourceFavorites ResourceFavorite[]
  resourceRatings   ResourceRating[]
  reviewsGiven      Review[]           @relation("StudentReviews")
  reviewsReceived   Review[]           @relation("TutorReviews")
  sessions          Session[]
  sessionRecordings SessionRecording[]
  sessionFiles      SessionFile[]
  slots             Slot[]
  tutorProfile      TutorProfile?
  userAchievements  UserAchievement[]
  userBadges        UserBadge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id                String             @id @default(uuid())
  studentId         String
  tutorId           String
  scheduledAt       DateTime
  status            BookingStatus      @default(PENDING)
  duration          Int                @default(60)
  price             Float              @default(25.0)
  isInstant         Boolean            @default(false)
  reviewId          String?            @unique
  createdAt         DateTime           @default(now())
  paymentReference  String?
  paymentMethod     String?
  paidAt            DateTime?
  student           User               @relation("StudentBookings", fields: [studentId], references: [id])
  tutor             User               @relation("TutorBookings", fields: [tutorId], references: [id])
  messages          Message[]
  payment           Payment?
  review            Review?            @relation("BookingReview")
  sessionRecordings SessionRecording[]
  sessionFiles      SessionFile[]
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  bookingId String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  bookingId String   @unique
  studentId String
  tutorId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  booking   Booking  @relation("BookingReview", fields: [bookingId], references: [id])
  student   User     @relation("StudentReviews", fields: [studentId], references: [id])
  tutor     User     @relation("TutorReviews", fields: [tutorId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  bookingId String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TutorProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique
  bio                   String?
  introVideoUrl         String?
  skills                String[]
  subjects              String[]
  languages             String[]
  experience            Int?
  education             String?
  hourlyRate            Float?
  rating                Float?
  totalSessions         Int?
  accent                String?
  isPro                 Boolean  @default(false)
  isSupertutor          Boolean  @default(false)
  availability          Json?
  payoutSettings        Json?
  instantBookingEnabled Boolean  @default(false)
  instantBookingPrice   Float?
  responseTime          Int?
  teachingMethods       String?
  specializations       String?
  certifications        String?
  achievements          String?
  testimonials          String?
  materials             String?
  lessonDuration        Int?
  maxStudents           Int?
  trialLesson           String?
  cancellationPolicy    String?
  timezone              String?
  socialLinks           Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
}

model SessionRecording {
  id        String   @id @default(uuid())
  sessionId String
  userId    String
  url       String
  fileName  String
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Slot {
  id          String    @id @default(uuid())
  tutorId     String
  date        DateTime?
  dayOfWeek   Int?
  startTime   String
  endTime     String
  type        String
  isRecurring Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tutor       User      @relation(fields: [tutorId], references: [id])
}

model ConnectedBank {
  id            String   @id @default(uuid())
  tutorId       String
  bankName      String
  accountNumber String
  routingNumber String?
  bankLogo      String?
  balance       Float    @default(0.0)
  connected     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tutor         User     @relation(fields: [tutorId], references: [id])
  payouts       Payout[]
}

model Badge {
  id          String        @id @default(uuid())
  key         String        @unique
  name        String
  description String
  icon        String
  category    BadgeCategory
  color       String
  criteria    Json
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model TeachingResource {
  id          String             @id @default(cuid())
  title       String
  description String
  type        ResourceType
  category    String
  difficulty  Difficulty
  duration    Int
  thumbnail   String?
  url         String?
  language    String
  ageGroup    AgeGroup
  tags        String[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  isActive    Boolean            @default(true)
  downloads   ResourceDownload[]
  favorites   ResourceFavorite[]
  ratings     ResourceRating[]
}

model ResourceDownload {
  id           String           @id @default(cuid())
  tutorId      String
  resourceId   String
  downloadedAt DateTime         @default(now())
  resource     TeachingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tutor        User             @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([tutorId, resourceId])
}

model ResourceFavorite {
  id          String           @id @default(cuid())
  tutorId     String
  resourceId  String
  favoritedAt DateTime         @default(now())
  resource    TeachingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tutor       User             @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([tutorId, resourceId])
}

model ResourceRating {
  id         String           @id @default(cuid())
  tutorId    String
  resourceId String
  rating     Int
  ratedAt    DateTime         @default(now())
  resource   TeachingResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tutor      User             @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([tutorId, resourceId])
}

model Payout {
  id            String         @id @default(cuid())
  tutorId       String
  bankAccountId String?
  amount        Float
  status        PayoutStatus   @default(PENDING)
  method        String
  reference     String         @unique
  createdAt     DateTime       @default(now())
  processedAt   DateTime?
  notes         String?
  bankAccount   ConnectedBank? @relation(fields: [bankAccountId], references: [id])
  tutor         User           @relation(fields: [tutorId], references: [id], onDelete: Cascade)
}

model AdminActivity {
  id        String   @id @default(uuid())
  adminId   String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model GlobalSettings {
  id        Int      @id @default(1)
  settings  Json
  version   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SettingsBackup {
  id        String   @id @default(uuid())
  backupId  String   @unique
  settings  Json
  version   String
  createdBy String
  createdAt DateTime @default(now())
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  isUnlocked    Boolean   @default(false)
  progress      Int       @default(0)
  current       Int       @default(0)
  unlockedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model SessionFile {
  id           String   @id @default(cuid())
  bookingId    String
  uploadedBy   String
  originalName String
  filename     String
  filePath     String
  fileSize     Int
  mimeType     String
  description  String?
  uploadedAt   DateTime @default(now())
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  uploadedByUser User   @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([uploadedBy])
  @@index([uploadedAt])
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
  SUPER_ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum NotificationType {
  SESSION_REMINDER
  SESSION_CANCELLED
  SESSION_RESCHEDULED
  NEW_MESSAGE
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_UPDATE
  INSTANT_BOOKING_REQUEST
  INSTANT_BOOKING_ACCEPTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ResourceType {
  LESSON_PLAN
  WORKSHEET
  VIDEO
  PRESENTATION
  QUIZ
  GAME
  TEMPLATE
  GUIDE
  AUDIO
  INTERACTIVE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AgeGroup {
  KIDS
  TEENS
  ADULTS
  ALL
}

enum BadgeCategory {
  ACHIEVEMENT
  MILESTONE
  SPECIAL
  SEASONAL
} 

enum crdb_internal_region {
  gcp_europe_west1 @map("gcp-europe-west1")
  gcp_europe_west2 @map("gcp-europe-west2")
  gcp_europe_west3 @map("gcp-europe-west3")
}
